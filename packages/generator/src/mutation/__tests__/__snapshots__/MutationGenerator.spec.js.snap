exports[`test generate mutation files 1`] = `
Object {
  "add": "// @flow

import {
  GraphQLString,
  GraphQLNonNull,
} from \'graphql\';
import {
  mutationWithClientMutationId,
  toGlobalId,
} from \'graphql-relay\';

import Example from \'../model/Example\';

import ExampleLoader from \'../loader/ExampleLoader\';
import ExampleConnection from \'../connection/ExampleConnection\';

export default mutationWithClientMutationId({
  name: \'ExampleAdd\',
  inputFields: {
    example: {
      type: new GraphQLNonNull(GraphQLString),
      description: \'My example field\',
    },
  },
  mutateAndGetPayload: async ({ example }, { user }) => {
    // Verify if user is authorized
    if (!user) {
      throw new Error(\'Unauthorized user\');
    }

    // TODO: mutation logic

    return {
      // id: id, // ID of the newly created row
      error: null,
    };
  },
  outputFields: {
    exampleEdge: {
      type: ExampleConnection.edgeType,
      resolve: async({ id }, args, { user }) => {
        // TODO: load new edge from loader

        const example = await ExampleLoader.load(
          user, id,
        );

        // Returns null if no node was loaded
        if (!example) {
          return null;
        }

        return {
          cursor: toGlobalId(\'example\', example),
          node: example,
        };
      },
    },
    error: {
      type: GraphQLString,
      resolve: ({ error }) => error,
    },
  },
});
",
  "addTest": "import { graphql } from \'graphql\';
import { schema } from \'../../schema\';
import { setupTest } from \'../../../test/helper\';

import User from \'../model/User\';
import Example from \'../model/Example\';

beforeEach(async () => await setupTest());

it(\'should not allow anonymous user\', async () => {
  const query = \`
    mutation M {
      ExampleAdd(input: {
        exampleField: \"Example field\"
      }) {
        exampleFieldToRetrieve
      }
    }
  \`;

  const rootValue = {};
  // No user should be passed to context since we are testing an anonymous session
  const context = {};

  const result = await graphql(schema, query, rootValue, context);

  expect(result).toMatchSnapshot();
});

it(\'should create a record on database\', async () => {
  const user = new User({
    name: \'user\',
    email: \'user@example.com\',
  });

  await user.save();

  const query = \`
    mutation M {
      ExampleAdd(input: {
        exampleField: \"Example field\"
      }) {
        exampleFieldToRetrieve
      }
    }
  \`;

  const rootValue = {};
  const context = { user };

  const result = await graphql(schema, query, rootValue, context);

  expect(result).toMatchSnapshot();
});
",
  "edit": "// @flow

import {
  GraphQLID,
  GraphQLString,
  GraphQLNonNull,
} from \'graphql\';
import {
  mutationWithClientMutationId,
  fromGlobalId,
} from \'graphql-relay\';

import Example from \'../model/Example\';

import ExampleType from \'../type/ExampleType\';
import ExampleLoader from \'../loader/ExampleLoader\';

export default mutationWithClientMutationId({
  name: \'ExampleEdit\',
  inputFields: {
    id: {
      type: new GraphQLNonNull(GraphQLID),
    },
    example: {
      type: GraphQLString,
    },
  },
  mutateAndGetPayload: async (args, { user }) => {
    // Verify if user is authorized
    if (!user) {
      throw new Error(\'Unauthorized user\');
    }

    const {
      id,
      example,
    } = args;

    // Check if the provided ID is valid
    const example = await Example.findOne({
      _id: fromGlobalId(id).id,
    });

    // If not, throw an error
    if (!example) {
      throw new Error(\'Invalid exampleId\');
    }

    // TODO: mutation logic

    // Clear dataloader cache
    ExampleLoader.clearCache(example._id);

    return {
      id: example._id,
      error: null,
    };
  },
  outputFields: {
    example: {
      type: ExampleType,
      resolve: (obj, args, { user }) => ExampleLoader.load(user, obj.id),
    },
    error: {
      type: GraphQLString,
      resolve: ({ error }) => error,
    },
  },
});
",
  "editTest": "import { graphql } from \'graphql\';
import { toGlobalId } from \'graphql-relay\';
import { schema } from \'../../schema\';
import { setupTest } from \'../../../test/helper\';

import User from \'../model/User\';
import Example from \'../model/Example\';

beforeEach(async () => await setupTest());

it(\'should not allow anonymous user\', async () => {
  const query = \`
    mutation M {
      ExampleEdit(input: {
        id: \"Example Id\"
        exampleField: \"Example field\"
      }) {
        exampleFieldToRetrieve
      }
    }
  \`;

  const rootValue = {};
  // No user should be passed to context since we are testing an anonymous session
  const context = {};

  const result = await graphql(schema, query, rootValue, context);

  expect(result).toMatchSnapshot();
});

it(\'should create a record on database\', async () => {
  const user = new User({
    name: \'user\',
    email: \'user@example.com\',
  });

  await user.save();

  const query = \`
    mutation M {
      ExampleEdit(input: {
        id: \"Example Id\"
        exampleField: \"Example field\"
      }) {
        exampleFieldToRetrieve
      }
    }
  \`;

  const rootValue = {};
  const context = { user };

  const result = await graphql(schema, query, rootValue, context);

  expect(result).toMatchSnapshot();
});
",
}
`;
