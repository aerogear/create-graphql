import { graphql } from 'graphql';
import { schema } from '../../schema';
import { setupTest } from '../../../test/helper';

import User from '<%= relativeModelDir %>/User';
import <%= name %> from '<%= relativeModelDir %>/<%= name %>';

beforeEach(async () => await setupTest());

it('should not allow anonymous user', async () => {
  const query = `
    mutation M {
      <%= mutationName %>(input: {
        <%_ for (field of schema.fields) { -%>
        <%- field.name %>: 'Example value',
        <%_ } -%>
      })
    }
  `;

  const rootValue = {};
  // No user should be passed to context since we are testing an anonymous session
  const context = {};

  const { errors } = await graphql(schema, query, rootValue, context);

  expect(errors).not.toBe(undefined);
});

it('should edit a record on database', async () => {
  const user = new User({
    name: 'user',
    email: 'user@example.com',
  });

  await user.save();

  // TODO: specify fields to create a new <%= name %>
  const <%= camelCaseName %> = new <%= name %>({
    <%_ for (field of schema.fields) { -%>
    <%- field.name %>: 'Example value',
    <%_ } -%>
  });

  await <%= camelCaseName %>.save();

  const <%= camelCaseName %>Id = toGlobalId('<%= name %>', <%= camelCaseName %>._id);

  const query = `
    mutation M {
      <%= mutationName %>(input: {
        id: <%= camelCaseName %>Id
        example: 'Example Field to Update'
      }) {
        <%= camelCaseName %> {
          _id
        }
      }
    }
  `;

  const rootValue = {};
  const context = { user };

  const { data, errors } = await graphql(schema, query, rootValue, context);

  expect(errors).toBe(undefined);
  expect(data.<%= mutationName %>.<%= camelCaseName %>._id).toBe(<%= camelCaseName %>._id.toString());
});
