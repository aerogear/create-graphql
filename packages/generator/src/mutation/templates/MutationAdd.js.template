// @flow

import {
  GraphQLString,
  GraphQLNonNull,
} from 'graphql';
import {
  mutationWithClientMutationId,
  toGlobalId,
} from 'graphql-relay';

import <%= name %>Loader from '<%= relativeLoaderDir %>/<%= name %>Loader';
import <%= name %>Connection from '<%= relativeConnectionDir %>/<%= name %>Connection';

export default mutationWithClientMutationId({
  name: '<%= name %>Add',
  inputFields: {
    example: {
      type: new GraphQLNonNull(GraphQLString),
      description: 'My example field',
    },
  },
  mutateAndGetPayload: async ({ example }, { user }) => {
    // Verify if user is authorized
    if (!user) {
      throw new Error('Unauthorized user');
    }

    // TODO: mutation logic

    return {
      // id: id, // ID of the newly created row
      error: null,
    };
  },
  outputFields: {
    <%= rawName %>Edge: {
      type: <%= name %>Connection.edgeType,
      resolve: async({ id }, args, { user }) => {
        // TODO: load new edge from loader

        const <%= rawName %> = await <%= name %>Loader.load(
          user, id,
        );

        // Returns null if no node was loaded
        if (!<%= rawName %>) {
          return null;
        }

        return {
          cursor: toGlobalId('<%= rawName %>', <%= rawName %>),
          node: <%= rawName %>,
        };
      },
    },
    error: {
      type: GraphQLString,
      resolve: ({ error }) => error,
    },
  },
});
