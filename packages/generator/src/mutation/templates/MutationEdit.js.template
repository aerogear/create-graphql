// @flow

import {
  GraphQLID,
  GraphQLString,
  GraphQLNonNull,
} from 'graphql';
import {
  mutationWithClientMutationId,
  fromGlobalId,
} from 'graphql-relay';

import <%= name %> from '<%= relativeModelDir %>/<%= name %>';

import <%= name %>Type from '<%= relativeTypeDir %>/<%= name %>Type';
import <%= name %>Loader from '<%= relativeLoaderDir %>/<%= name %>Loader';

export default mutationWithClientMutationId({
  name: '<%= name %>Edit',
  inputFields: {
    id: {
      type: new GraphQLNonNull(GraphQLID),
    },
    example: {
      type: GraphQLString,
    },
  },
  mutateAndGetPayload: async (args, { user }) => {
    // Verify if user is authorized
    if (!user) {
      throw new Error('Unauthorized user');
    }

    const {
      id,
      example,
    } = args;

    // Check if the provided ID is valid
    const <%= rawName %> = await <%= name %>.findOne({
      _id: fromGlobalId(id).id,
    });

    // If not, throw an error
    if (!<%= rawName %>) {
      throw new Error('Invalid <%= rawName %>Id');
    }

    // TODO: mutation logic

    // Clear dataloader cache
    <%= name %>Loader.clearCache(<%= rawName %>._id);

    return {
      id: <%= rawName %>._id,
      error: null,
    };
  },
  outputFields: {
    <%= rawName %>: {
      type: <%= name %>Type,
      resolve: (obj, args, { user }) => <%= name %>Loader.load(user, obj.id),
    },
    error: {
      type: GraphQLString,
      resolve: ({ error }) => error,
    },
  },
});
